<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="flex.utils.ui.*" addedToStage="addedToStageHandler(event)" resize="canvas1_resizeHandler(event)" width="100%" height="100%" xmlns:s="library://ns.adobe.com/flex/spark">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.events.SliderEvent;

			public var sliceDescriptor:SliceDescriptor;
			
			private var hasOverlay:Boolean;
			public function setSlice(s:String,w:SliceWindow):void
			{
//				ImageOverlay.source=s;
//				s="45_12_R2022_s0292.png"
				if(s!=null)
				{
					var ldr:Loader=new Loader;
					ldr.contentLoaderInfo.addEventListener(Event.COMPLETE,compl);
					ldr.load(new URLRequest(s));
				}
				else
				{
					ImageOverlay.source=null;
					bitmap=null;
				} 
				const hadOverlay:Boolean=hasOverlay;
				hasOverlay=s!=null;
				w.hasOverlay=hasOverlay;
				if(hasOverlay)
				{
					if(!hadOverlay)
					{
						AlphaSlider.value=50;
						ImageOverlay.alpha=0.5;
						AlphaSlider.visible=btn_hist.visible=btn_vol.visible=true;
						AlphaSlider.enabled=btn_hist.enabled=btn_vol.enabled=true;
					}
				}
				else
				{
					AlphaSlider.value=100;
					ImageOverlay.alpha=1;
					AlphaSlider.visible=btn_hist.visible=btn_vol.visible=false;
					AlphaSlider.enabled=btn_hist.enabled=btn_vol.enabled=false;
					canvas1_resizeHandler(null);
				}
			}
			
			private var bitmap:BitmapData=null;
			public function compl(e:Event):void
			{
				bitmap=e.target.content.bitmapData;
				doMagic();
			}
			public function doMagic():void
			{
				if(bitmap==null)return;
				var ctrl:int=QuickNII.diz.valbox.ctrl_S.value;
				const R:Boolean=QuickNII.diz.valbox.ctrl_R0.selected;
				const G:Boolean=QuickNII.diz.valbox.ctrl_G0.selected;
				const B:Boolean=QuickNII.diz.valbox.ctrl_B0.selected;
				var ba:ByteArray=bitmap.getPixels(bitmap.rect);
				if(R && G && B && (ctrl==255))
					ImageOverlay.source=new Bitmap(bitmap);
				else
				{
					if(ctrl==0)
					{
						ba.position=0;
						while(ba.bytesAvailable>0)
						{
							ba.position++;
							var tmp:uint=ba.readUnsignedByte();
							if(R && (tmp>ctrl))ctrl=tmp;
							tmp=ba.readUnsignedByte();
							if(G && (tmp>ctrl))ctrl=tmp;
							tmp=ba.readUnsignedByte();
							if(B && (tmp>ctrl))ctrl=tmp;
						}
						QuickNII.diz.valbox.ctrl_S.value=ctrl;
					}
					ba.position=0;
					while(ba.bytesAvailable>0)
					{
						ba.position++;
						if(R)
						{
							tmp=ba.readUnsignedByte()*255/ctrl;
							if(tmp>255)tmp=255;
							ba.position--;
							ba.writeByte(tmp);
						}
						else ba.writeByte(0);
						if(G)
						{
							tmp=ba.readUnsignedByte()*255/ctrl;
							if(tmp>255)tmp=255;
							ba.position--;
							ba.writeByte(tmp);
						}
						else ba.writeByte(0);
						if(B)
						{
							tmp=ba.readUnsignedByte()*255/ctrl;
							if(tmp>255)tmp=255;
							ba.position--;
							ba.writeByte(tmp);
						}
						else ba.writeByte(0);
					}
					ba.position=0;
					var bd:BitmapData=new BitmapData(bitmap.width,bitmap.height);
					bd.setPixels(bd.rect,ba);
					ImageOverlay.source=new Bitmap(bd);
				}
				canvas1_resizeHandler(null);
			}

			private var slicx:Number;
			private var slicy:Number;
			private var slicw:Number;
			private var slich:Number;
			public function canvas1_resizeHandler(event:ResizeEvent):void
			{
				AlphaSlider.y=btn_hist.height;
				btn_vol.y=height-btn_vol.height;
				AlphaSlider.height=btn_vol.y-AlphaSlider.y;
				if(hasOverlay && ImageOverlay.source!=null)
				{
					const indent:Number=btn_hist.width; // 31
					const work:Number=width-indent;
//					if(ImageOverlay.contentWidth/ImageOverlay.contentHeight>width/height)
					if(ImageOverlay.source.bitmapData.width/ImageOverlay.source.bitmapData.height>width/height)
					{
						ImageOverlay.x=slicx=indent;
						ImageOverlay.width=slicw=work;
//						ImageOverlay.height=slich=ImageOverlay.contentHeight*work/ImageOverlay.contentWidth;
						ImageOverlay.height=slich=ImageOverlay.source.bitmapData.height*work/ImageOverlay.source.bitmapData.width;
						ImageOverlay.y=slicy=(height-ImageOverlay.height)/2;
					}
					else
					{
						ImageOverlay.y=slicy=0;
						ImageOverlay.height=slich=height;
//						ImageOverlay.width=slicw=ImageOverlay.contentWidth*height/ImageOverlay.contentHeight;
						ImageOverlay.width=slicw=ImageOverlay.source.bitmapData.width*height/ImageOverlay.source.bitmapData.height;
						ImageOverlay.x=slicx=indent+(work-ImageOverlay.width)/2;
					}
				}
				else
				{
					if(sliceDescriptor.width/sliceDescriptor.height>width/height)
					{
						slicx=0;
						slicw=width;
						slich=sliceDescriptor.height*width/sliceDescriptor.width;
						slicy=(height-slich)/2;
					}
					else
					{
						slicy=0;
						slich=height;
						slicw=sliceDescriptor.width*height/sliceDescriptor.height;
						slicx=(width-slicw)/2;
					}
				}
				NIISlice.x=slicx;
				NIISlice.y=slicy;
				NIISlice.width=slicw;
				NIISlice.height=slich;
			}

			protected function mdouble(event:MouseEvent):void
			{
				if(!hasOverlay)return;
				if(NIISlice.mouseX>=0 && NIISlice.mouseY>=0 && NIISlice.mouseX<NIISlice.width && NIISlice.mouseY<NIISlice.height)
				{
					anchorX=mouseX;
					anchorY=mouseY;
					anchored=true;
					const f:Number=(anchorX-ox)*sliceDescriptor.width/ow;
				}
				else if(anchored)anchored=false;
				drawAnchor();
			}
			private var A_M_NONE:uint=0;
			private var A_M_HORIZ:uint=2;
			private var A_M_VERT:uint=4;
			private var A_M_ROT:uint=8;
			private var anchorMode:uint;
			private var anchored:Boolean;
			private var anchorX:Number;
			private var anchorY:Number;
			protected function canvas1_keyDownHandler(event:KeyboardEvent):void
			{
				if(!hasOverlay)return;
				if(event.keyCode==8 || event.keyCode==46 || event.keyCode==27) // backspace-delete-esc
				{
					anchored=false;
				}
				else if(event.keyCode==32)
				{
					if(NIISlice.mouseX>=0 && NIISlice.mouseY>=0 && NIISlice.mouseX<NIISlice.width && NIISlice.mouseY<NIISlice.height)
					{
						anchorX=mouseX;
						anchorY=mouseY;
						anchored=true;
						const f:Number=(anchorX-ox)*sliceDescriptor.width/ow;
					}
					else if(anchored)anchored=false;
				}
				else if(event.keyCode=='H'.charCodeAt() || event.keyCode=='h'.charCodeAt())
				{
					btn_hist.selected=!btn_hist.selected;
					histHandler(null);
				}
				else if(event.keyCode=='V'.charCodeAt() || event.keyCode=='v'.charCodeAt())
				{
					btn_vol.selected=!btn_vol.selected;
					volHandler(null);
				}
				else if(event.keyCode==33) // PageUp
				{
					if(AlphaSlider.value<90)
					{
						AlphaSlider.value+=10;
						alphaHandler(null);
					}
				}
				else if(event.keyCode==34) // PageDown
				{
					if(AlphaSlider.value>10)
					{
						AlphaSlider.value-=10;
						alphaHandler(null);
					}
				}
				drawAnchor();
			}
			
			public function drawAnchor():void
			{
				const g:Graphics=MarkerCanvas.graphics;
				g.clear();
				if(!anchored)
					return;
				// no-rot
				g.lineStyle(1,0xFF00);
				g.moveTo(anchorX-10,anchorY);
				g.lineTo(anchorX+10,anchorY);
				g.moveTo(anchorX,anchorY-10);
				g.lineTo(anchorX,anchorY+10);
				g.lineStyle(2,0xFF00);
				if((anchorMode & A_M_HORIZ)!=0)
				{
					g.moveTo(anchorX-6,anchorY-4);
					g.lineTo(anchorX-10,anchorY);
					g.lineTo(anchorX-6,anchorY+4);
					g.moveTo(anchorX+6,anchorY-4);
					g.lineTo(anchorX+10,anchorY);
					g.lineTo(anchorX+6,anchorY+4);
				}
				if((anchorMode & A_M_VERT)!=0)
				{
					g.moveTo(anchorX-4,anchorY-6);
					g.lineTo(anchorX,anchorY-10);
					g.lineTo(anchorX+4,anchorY-6);
					g.moveTo(anchorX-4,anchorY+6);
					g.lineTo(anchorX,anchorY+10);
					g.lineTo(anchorX+4,anchorY+6);
				}
			}
			
			public function drawMidCross():void
			{
				if(hasOverlay)return;
				const g:Graphics=MarkerCanvas.graphics;
				g.lineStyle(1,0xFF8080);
				g.moveTo(NIISlice.x+NIISlice.width/2,0);
				g.lineTo(NIISlice.x+NIISlice.width/2,height);
				g.moveTo(0,NIISlice.y+NIISlice.height/2);
				g.lineTo(width,NIISlice.y+NIISlice.height/2);
			}

			protected function mfoc(event:MouseEvent):void
			{
				setFocus();
			}

			protected function addedToStageHandler(event:Event):void
			{
				stage.addEventListener(KeyboardEvent.KEY_DOWN,canvas1_keyDownHandler,true);
				addEventListener(MouseEvent.MOUSE_OVER,mfoc);
				addEventListener(MouseEvent.MOUSE_DOWN,mdown);
				addEventListener(MouseEvent.MOUSE_UP,mup);
				addEventListener(MouseEvent.MOUSE_OUT,mup);//??
				addEventListener(MouseEvent.MOUSE_MOVE,mdrag);
				addEventListener(MouseEvent.DOUBLE_CLICK,mdouble);
			}
			
			private var dragging:Boolean;
			private var dragx:Number;
			private var dragy:Number;
			private var ox:Number;
			private var oy:Number;
			private var ow:Number;
			private var oh:Number;
			protected function mdown(event:MouseEvent):void
			{
				if(QuickNII.navilock)return;
				if(NIISlice.mouseX>=0 && NIISlice.mouseY>=0 && NIISlice.mouseX<NIISlice.width && NIISlice.mouseY<NIISlice.height)
				{
					dragging=true;
					dragx=mouseX;
					dragy=mouseY;
					ox=NIISlice.x;
					oy=NIISlice.y;
					ow=NIISlice.width;
					oh=NIISlice.height;
					if(anchorMode==A_M_NONE || !anchored)
						drawMidCross();
				}
			}
			protected function mup(event:MouseEvent):void
			{
				drawAnchor();
				if(!dragging)return;
				dragging=false;
				var ushift:Number=0;
				var vshift:Number=0;
				if(anchorMode==A_M_NONE || !anchored)
				{
					ushift=(dragx-mouseX)*sliceDescriptor.width/ow;
					vshift=-(dragy-mouseY)*sliceDescriptor.height/oh;
				}
				else if(anchored)
				{
					if((anchorMode & A_M_HORIZ)!=0)
					{
						const xrate:Number=slicw/NIISlice.width;
						const xdist:Number=(ox+ow/2-anchorX)*sliceDescriptor.width/ow;
						ushift=xdist*(xrate-1);
						sliceDescriptor.width*=xrate;
						outer.setDrag();
					}
					if((anchorMode & A_M_VERT)!=0)
					{
						const yrate:Number=slich/NIISlice.height;
						const ydist:Number=(oy+oh/2-anchorY)*sliceDescriptor.height/oh;
						vshift=-ydist*(yrate-1);
						sliceDescriptor.height*=yrate;
						outer.setDrag();
					}
				}
				sliceDescriptor.UVShift(ushift,vshift);
				sliceDescriptor.CommitChanges();
			}
			protected function mdrag(event:MouseEvent):void
			{
				if(!dragging)return;
				sliceDescriptor.CommitChanges();
				
				if(anchorMode==A_M_NONE || !anchored)
				{
					NIISlice.x=ox+mouseX-dragx;
					NIISlice.y=oy+mouseY-dragy;
				}
				
				if(anchored)
				{
					if((anchorMode & A_M_HORIZ)!=0)
					{
						const xrate:Number=(mouseX-anchorX)/(dragx-anchorX);
						NIISlice.width=ow*xrate;
						NIISlice.x=anchorX-(anchorX-ox)*xrate;
					}
					if((anchorMode & A_M_VERT)!=0)
					{
						const yrate:Number=(mouseY-anchorY)/(dragy-anchorY);
						NIISlice.height=oh*yrate;
						NIISlice.y=anchorY-(anchorY-oy)*yrate;
					}
				}
			}
			
			public var outer:Object;
			public function onLeft(event:MouseEvent):void{sliceDescriptor.UVStep(+1,0);sliceDescriptor.StopRedo();}
			public function onRight(event:MouseEvent):void{sliceDescriptor.UVStep(-1,0);sliceDescriptor.StopRedo();}
			public function onUp(event:MouseEvent):void{sliceDescriptor.UVStep(0,-1);sliceDescriptor.StopRedo();}
			public function onDown(event:MouseEvent):void{sliceDescriptor.UVStep(0,+1);sliceDescriptor.StopRedo();}
			public function onCCW(event:MouseEvent):void{sliceDescriptor.UVStepRot(-1);sliceDescriptor.StopRedo();}
			public function onCW(event:MouseEvent):void{sliceDescriptor.UVStepRot(+1);sliceDescriptor.StopRedo();}
			public function onHS(/*event:MouseEvent*/):void{anchorMode=A_M_HORIZ;drawAnchor();}
			public function onVS(/*event:MouseEvent*/):void{anchorMode=A_M_VERT;drawAnchor();}
//			public function onFS(event:MouseEvent):void{anchorMode=A_M_HORIZ | A_M_VERT;drawAnchor();}
//			public function onRF(event:MouseEvent):void{anchorMode=A_M_ROT;drawAnchor();}
			public function onDrag(/*event:MouseEvent*/):void{anchorMode=A_M_NONE;drawAnchor();}
			
			public function alphaHandler(event:SliderEvent):void
			{
				if(imageover)ImageOverlay.alpha=AlphaSlider.value/100;
				else NIISlice.alpha=1-AlphaSlider.value/100;
				btn_hist.selected=btn_vol.selected=false;
			}

			public function histHandler(event:Event):void
			{
				if(imageover)ImageOverlay.alpha=btn_hist.selected?1:AlphaSlider.value/100;
				else NIISlice.alpha=1-(btn_hist.selected?1:AlphaSlider.value/100);
				btn_vol.selected=false;
			}
			
			public function volHandler(event:Event):void
			{
				if(imageover)ImageOverlay.alpha=btn_vol.selected?0:AlphaSlider.value/100;
				else NIISlice.alpha=1-(btn_vol.selected?0:AlphaSlider.value/100);
				btn_hist.selected=false;
			}
			
			private static const imageover:Boolean=true;
//			private static const imageover:Boolean=false;
		]]>
	</mx:Script>
<!--	<mx:Image id="ImageOverlay" complete="canvas1_resizeHandler(null)"/>-->
	<mx:Image id="NIISlice" maintainAspectRatio="false"/>
	<mx:Image id="ImageOverlay" complete="canvas1_resizeHandler(null)"/>
	<mx:VSlider id="AlphaSlider" maximum="100" enabled="false" visible="false" liveDragging="true" change="alphaHandler(event)"/>
	<mx:Canvas id="MarkerCanvas" mouseEnabled="false"/>
	<mx:Button label="H" id="btn_hist" width="31" enabled="false" visible="false" toggle="true" change="histHandler(event)" toolTip="Show (histological) image only"/>
	<mx:Button label="V" id="btn_vol" width="31" enabled="false" visible="false" toggle="true" change="volHandler(event)" toolTip="Show volume only"/>
</mx:Canvas>
