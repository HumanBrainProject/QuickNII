<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" backgroundColor="#FFFFFF" resize="canvas1_resizeHandler(event)" xmlns:ns1="*" mouseOver="canvas1_mouseOverHandler(event)" mouseOut="main.SliceMix.drawAnchor()" xmlns:s="library://ns.adobe.com/flex/spark">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.DataGridEvent;
			import mx.events.ResizeEvent;

			public var main:QuickNII;

			public var xdim:int;
			public var ydim:int;
			public var zdim:int;

			[Bindable] protected var rows:ArrayCollection=new ArrayCollection; 

			public function initTransformations(transforms:Vector.<NamedTransformation>):void {
				rows.addItem(new NamedTransformation("Voxels",1,0,0,0,0,1,0,0,0,0,1,0));
				for(var i:int=0;i<transforms.length;i++)
					rows.addItem(transforms[i]);
			}

			public function setVox(x:Number,y:Number,z:Number):void {
				x=xdim-1-x;
				y=ydim-1-y;
				z=zdim-1-z;

				for(var i:int=0;i<rows.length;i++)
					rows.getItemAt(i).setVox(x,y,z);
			}

			public function updateFrom(idx:int):void {
				const base:NamedTransformation=rows.getItemAt(idx) as NamedTransformation;
				const basex:Number=xdim-1-base.voxx;
				const basey:Number=ydim-1-base.voxy;
				const basez:Number=zdim-1-base.voxz;
				main.cut.setlocation(basex,basey,basez);
			}

			protected function canvas1_resizeHandler(event:ResizeEvent):void {
				gray.y=outline.y=decompcfg.y=navilock.y=trfs.y+trfs.height+10;
				min.y=height-10-min.height;
				max.y=min.y-10-max.height;
				min.width=max.width=width-10-10;
			}

			protected function canvas1_mouseOverHandler(event:MouseEvent):void {
				main.SliceMix.drawMidCross();
			}

			protected function trfs_itemFocusOutHandler(event:DataGridEvent):void {
				updateFrom(event.rowIndex);
			}
		]]>
	</mx:Script>
	<mx:CheckBox id="gray" label="Grayscale" change="main.refresh()" x="10" selected="true" enabled="false" y="168"/>
	<mx:CheckBox id="outline" label="Outline" change="main.refresh()" x="96" y="168"/>
	<mx:ComboBox id="decompcfg" x="169" change="main.styleDecomp();main.updateDecomp();MgmtPanel.interpolate()" y="168">
		<mx:ArrayList>
			<mx:String>Coronal</mx:String>
			<mx:String>Sagittal</mx:String>
			<mx:String>Horizontal</mx:String>
		</mx:ArrayList>
	</mx:ComboBox>
	<mx:CheckBox x="279" y="168" label="Disable Cut controls" id="navilock" selected="{QuickNII.navilock}" change="QuickNII.navilock=navilock.selected;QuickNII.diz.slicewindow.invalidateDisplayList()"/>
	<mx:HSlider id="min" x="10" change="main.refresh()" liveDragging="true"/>
	<mx:HSlider id="max" x="10" change="main.refresh()" liveDragging="true"/>
	<mx:DataGrid id="trfs" x="10" y="10" editable="true" width="700" sortableColumns="false" itemFocusOut="trfs_itemFocusOutHandler(event)" dataProvider="{rows}" draggableColumns="false">
		<mx:columns>
			<mx:DataGridColumn dataField="name" sortable="false" headerText="Transformation" editable="false"/>
			<mx:DataGridColumn dataField="x" headerText="x"/>
			<mx:DataGridColumn dataField="y" headerText="y"/>
			<mx:DataGridColumn dataField="z" headerText="z"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:CheckBox x="305" label="R" id="ctrl_R" selected="true" y="196" change="QuickNII.diz.fetchSlice()"/>
	<mx:CheckBox x="346" label="G" id="ctrl_G" selected="true" y="196" change="QuickNII.diz.fetchSlice()"/>
	<mx:CheckBox x="387" label="B" id="ctrl_B" selected="true" y="196" change="QuickNII.diz.fetchSlice()"/>
	<mx:Label x="10" y="200" text="Enable/disable color channels"/>
	<mx:Label x="188" y="200" text="Template (volume)"/>
	<mx:Label x="188" y="224" text="Image (histology)"/>
	<mx:CheckBox x="305" label="R" id="ctrl_R0" selected="true" y="220" change="main.SliceMix.doMagic()"/>
	<mx:CheckBox x="346" label="G" id="ctrl_G0" selected="true" y="220" change="main.SliceMix.doMagic()"/>
	<mx:CheckBox x="387" label="B" id="ctrl_B0" selected="true" y="220" change="main.SliceMix.doMagic()"/>
	<mx:Label x="454" y="222" text="Image darkness (0=auto)"/>
	<mx:HSlider x="604" y="218" id="ctrl_S" minimum="0" maximum="255" value="255" snapInterval="1" change="main.SliceMix.doMagic()"/>
	<mx:Label x="772" y="222" text="(255=original)"/>
</mx:Canvas>
